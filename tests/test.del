
let eqsuc (x y : Nat) (r : x = y) : suc x = suc y := elim r {
    refl := refl
}


let cong (A : Set) (x y : A)
        (f : (_:A) -> A) (r : x = y)
        : f x = f y := elim r {
    refl := refl
}

/*
// suma
fix f (x : Nat) : (_ : Nat) -> Nat . \(y : Nat). elim x {
    zero := y ;
    suc n := suc (f n y)
}
*/

/*
// eq
refl : (fix f (x : Nat) : (_ : Nat) -> Nat . \(y : Nat) . elim x {
        zero := elim y {
            zero := 0 ;
            suc _ := 1
        };
        suc n := elim y {
            zero := 1 ;
            suc m := f n m
        }
    }) 3 3 = 0
*/

/*
// ni idea que hace esto
// mejor ejemplo de recursion doble?
fix f (x : Nat) : (_ : Nat) -> Nat .
    fix g (y : Nat) : Nat . elim x {
        zero := y ;
        suc n := elim y {
            zero := f n n ;
            suc m := g m
        }
    }
*/

/*
// ackermann
fix f (x : Nat) : (_ : Nat) -> Nat .
    fix g (y : Nat) : Nat . elim x {
        zero := suc y ;
        suc m := elim y {
            zero := f m 1 ;
            suc n := f m (g n)
        }
    }
*/


let subst (A : Set) (P : (_ : A) -> Set)
        (x y : A) (r : x = y)
        (p : P x) : P y := elim r {
    refl := p
}

let eq_elim (A : Set) (C : (_ : A) -> (_: A) -> Set)
        (x y : A) (r : x = y)
        (j : (x : A) -> C x x) : C x y :=
    elim r {
    refl := j x
    }